<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python实现卷积与傅里叶变换</title>
      <link href="/post/1314229610.html"/>
      <url>/post/1314229610.html</url>
      
        <content type="html"><![CDATA[<h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><p>实验二的要求有两个：</p><ol><li>验证给出的程序实例中的相关程序</li><li>编写程序，绘制下列信号的卷积波形<ul><li>已知  $x_1(t)=t u(t)$, $x_2(t)=\mathrm{e}^{-t} u(t)$ , 求  $x 1(t) * x 2(t)$ ; (要求: 抽样频率  $f_{s}=1000$ ; 时间  $t=-1.1 \sim 2.1$  )</li><li>已知 $x[n]=[3,2,1,-2,1,0,4,0,3 ; n=0: 8]$ ; $h[n]=[1,-2,3,-4,3,2,1 ; n=   0: 6]$ ; 求  $x[n] * h[n]$  。</li></ul></li></ol><p>首先先验证给出的两个程序。</p><h2 id="验证给定程序"><a href="#验证给定程序" class="headerlink" title="验证给定程序"></a>验证给定程序</h2><h3 id="连续时间信号的卷积"><a href="#连续时间信号的卷积" class="headerlink" title="连续时间信号的卷积"></a>连续时间信号的卷积</h3><p>样例程序 <strong>experiment_2_1.py</strong>计算的是$\mathrm{x}_ 1(\mathrm{t})=\mathrm{u}(\mathrm{t}) \text { 与 } \mathrm{x}_ 2(\mathrm{t})=\mathrm{e}^{-3 \mathrm{t}} \mathrm{u}(\mathrm{t})$这两个函数的卷积。</p><h4 id="代码解释"><a href="#代码解释" class="headerlink" title="代码解释"></a>代码解释</h4><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 需要的 library 库  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg <span class="comment"># 导入 scipy 的 signal 库 命名为 sg</span></span><br><span class="line"></span><br><span class="line">fs = <span class="number">100</span> <span class="comment"># 采样频率，注意和时间轴右端点结合使用，用于控制右端点的范围</span></span><br><span class="line">t1 = np.array([t/fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">211</span>)]) <span class="comment"># t in [-2.0, 2.1] # 时间序列，注意右端点控制在2.1范围内，即2.1=211/fs</span></span><br><span class="line">x1 = np.array([<span class="number">1</span> <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x1(t)阶跃信号</span></span><br><span class="line">t2 = np.array([t/fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">211</span>)]) <span class="comment"># t in [-2.0, 2.1] # 时间序列，注意右端点控制在2.1范围内，即2.1=211/fs</span></span><br><span class="line">x2 = np.array([np.exp(-<span class="number">3</span>*t) <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x2(t)信号</span></span><br><span class="line">y1 = sg.convolve(x1,x2)/fs <span class="comment"># 卷积</span></span><br><span class="line">n = <span class="built_in">len</span>(y1) <span class="comment"># 卷积结果采样点数量</span></span><br><span class="line">tt = np.linspace(-<span class="number">400</span>,<span class="number">421</span>,n)/fs <span class="comment"># 定义新序列时间范围，卷积结果时间轴，卷积左端点=x1左端点+x2左端点，卷积右端点=x1右端点+x2右端点-1，</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>)) <span class="comment"># 通过figsize调整图大小</span></span><br><span class="line">plt.subplots_adjust(wspace = <span class="number">0.2</span>, hspace = <span class="number">0.2</span>) <span class="comment"># 通过wspace和hspace调整子图间距</span></span><br><span class="line">plt.subplot(<span class="number">221</span>) <span class="comment"># 绘制x1(t)信号的子图</span></span><br><span class="line">plt.plot(t1,x1) <span class="comment"># 绘制x1(t)信号</span></span><br><span class="line">plt.grid() <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x1(t)&#x27;</span>) <span class="comment"># x1(t)信号title</span></span><br><span class="line">plt.subplot(<span class="number">222</span>) <span class="comment"># 绘制x2(t)信号的子图</span></span><br><span class="line">plt.plot(t2,x2) <span class="comment"># 绘制x2(t)信号</span></span><br><span class="line">plt.grid() <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x2(t)&#x27;</span>) <span class="comment"># x2(t)信号title</span></span><br><span class="line">plt.subplot(<span class="number">212</span>) <span class="comment"># 绘制卷积信号的子图</span></span><br><span class="line">plt.plot(tt,y1) <span class="comment"># 绘制卷积信号</span></span><br><span class="line">plt.grid() <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;conv(x1,x2)&#x27;</span>) <span class="comment"># 卷积信号title</span></span><br><span class="line">plt.show() <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure><p>这段代码的解释如下：</p><ol><li>导入必要的库：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg <span class="comment"># 导入 scipy 的 signal 库 命名为 sg</span></span><br></pre></td></tr></table></figure>这里导入了<code>numpy</code>用于数学计算，<code>matplotlib.pyplot</code>用于绘图，以及<code>scipy.signal</code>用于信号处理。</li><li>定义采样频率和时间序列：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs = <span class="number">100</span> <span class="comment"># 采样频率</span></span><br><span class="line">t1 = np.array([t/fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">200</span>,<span class="number">211</span>)]) <span class="comment"># 时间序列，t的范围是[-2.0, 2.1]</span></span><br></pre></td></tr></table></figure><code>fs</code>是采样频率，用于将连续时间信号转换为离散信号。<code>t1</code>是一个数组，代表了时间序列，其元素是从-2.0到2.1，以<code>fs</code>的倒数作为步长。</li><li>定义信号：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.array([<span class="number">1</span> <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x1(t)阶跃信号</span></span><br><span class="line">x2 = np.array([np.exp(-<span class="number">3</span>*t) <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x2(t)信号</span></span><br></pre></td></tr></table></figure><code>x1</code>是一个阶跃信号，当<code>t</code>大于等于0时，值为1，否则为0。<code>x2</code>是一个指数衰减信号，当<code>t</code>大于等于0时，值为<code>e^(-3t)</code>，否则为0。</li><li>计算卷积并定义时间序列：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">y1 = sg.convolve(x1,x2)/fs <span class="comment"># 卷积</span></span><br><span class="line">n = <span class="built_in">len</span>(y1) <span class="comment"># 卷积结果采样点数量</span></span><br><span class="line">tt = np.linspace(-<span class="number">400</span>,<span class="number">421</span>,n)/fs <span class="comment"># 定义新序列时间范围，卷积结果时间轴</span></span><br></pre></td></tr></table></figure><code>y1</code>是通过<code>scipy.signal.convolve</code>函数计算<code>x1</code>和<code>x2</code>的卷积并除以采样频率<code>fs</code>得到的。<code>n</code>是卷积结果的采样点数量。<code>tt</code>是新定义的时间序列，用于表示卷积结果的时间轴。</li><li>绘制信号波形：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>)) <span class="comment"># 创建一个2x2的子图布局</span></span><br><span class="line">plt.subplots_adjust(wspace = <span class="number">0.2</span>, hspace = <span class="number">0.2</span>) <span class="comment"># 调整子图之间的间距</span></span><br><span class="line"><span class="comment"># 绘制x1(t)信号</span></span><br><span class="line">plt.subplot(<span class="number">221</span>) </span><br><span class="line">plt.plot(t1,x1) </span><br><span class="line">plt.grid() </span><br><span class="line">_ = plt.title(<span class="string">&#x27;x1(t)&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制x2(t)信号</span></span><br><span class="line">plt.subplot(<span class="number">222</span>) </span><br><span class="line">plt.plot(t2,x2) </span><br><span class="line">plt.grid() </span><br><span class="line">_ = plt.title(<span class="string">&#x27;x2(t)&#x27;</span>)</span><br><span class="line"><span class="comment"># 绘制卷积信号</span></span><br><span class="line">plt.subplot(<span class="number">212</span>) </span><br><span class="line">plt.plot(tt,y1) </span><br><span class="line">plt.grid() </span><br><span class="line">_ = plt.title(<span class="string">&#x27;conv(x1,x2)&#x27;</span>)</span><br><span class="line">plt.show() <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure>这部分代码用于绘制信号波形。首先创建一个2x2的子图布局，并调整子图之间的间距。然后分别在每个子图中绘制<code>x1(t)</code>、<code>x2(t)</code>以及它们的卷积信号<code>conv(x1,x2)</code>。最后调用<code>plt.show()</code>显示所有子图。</li></ol><blockquote><ol><li><code>sg.convolve(x1, x2)/fs</code>为什么要除以<code>fs</code>？ 卷积操作后，输出信号的幅度可能会因为采样点的增多而增大。由于这里的采样频率是<code>fs</code>，卷积结果的每个点实际上代表了一个时间间隔为<code>1/fs</code>的信号能量。为了保持信号的能量不变，需要对卷积结果进行归一化处理，即将卷积结果除以采样频率<code>fs</code>。这样，卷积结果的幅度就代表了在连续时间域中的信号能量。</li><li><code>tt = np.linspace(-400, 421, n)/fs</code>为什么是-400到421？ 卷积操作会改变信号的时间轴。在这个例子中，<code>x1</code>和<code>x2</code>的时间轴都是从-2.0到2.1。卷积的输出信号的时间轴将是两个输入信号时间轴的并集，即从<code>x1</code>的最左端（-2.0）加上<code>x2</code>的最左端（-2.0）到<code>x1</code>的最右端（2.1）加上<code>x2</code>的最右端（2.1）减去一个采样间隔。</li></ol></blockquote><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/images/Python实现卷积与傅里叶变换.assets/8901cbea-ee42-4d75-8d2a-a6f87d394f98.jpg" alt="图1"></p><p>成功输出了卷积的信号。</p><h3 id="离散时间信号的卷积"><a href="#离散时间信号的卷积" class="headerlink" title="离散时间信号的卷积"></a>离散时间信号的卷积</h3><p>样例程序 <strong>experiment_2_2.py</strong>计算的是$\mathrm{x}[\mathrm{k}]=[1,2,1,1,0,-3 ; \mathrm{k}=0,1,2,3,4,5]$和$\mathrm{h}[\mathrm{k}]=[1,-1,1 ; \mathrm{k}=0,1,2]$​这两个函数的卷积。</p><h4 id="代码解释-1"><a href="#代码解释-1" class="headerlink" title="代码解释"></a>代码解释</h4><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 需要的 library 库  </span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment"># 科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt <span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg <span class="comment"># 导入 scipy 的 signal 库 命名为 sg</span></span><br><span class="line"></span><br><span class="line">n1 = np.linspace(<span class="number">0</span>,<span class="number">5</span>,<span class="number">6</span>) <span class="comment"># 时间序列[0 1 2 3 4 5]</span></span><br><span class="line">x1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">3</span>] <span class="comment"># 信号x[n]</span></span><br><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>)) <span class="comment"># 通过figsize调整图大小</span></span><br><span class="line">plt.subplot(<span class="number">221</span>) <span class="comment"># 绘制x[n]信号的子图</span></span><br><span class="line">plt.stem(n1,x1,<span class="string">&#x27;-&#x27;</span>,use_line_collection=<span class="literal">True</span>) <span class="comment"># 绘制x[n]信号</span></span><br><span class="line">plt.grid(<span class="literal">True</span>) <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x[n]&#x27;</span>) <span class="comment"># 信号x[n] title</span></span><br><span class="line"></span><br><span class="line">n2 = np.linspace(<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 时间序列[0 1 2]</span></span><br><span class="line">x2 = [<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>] <span class="comment"># 信号h[n]</span></span><br><span class="line">plt.subplot(<span class="number">222</span>) <span class="comment"># 绘制h[n]信号的子图</span></span><br><span class="line">plt.stem(n2,x2,<span class="string">&#x27;-&#x27;</span>,use_line_collection=<span class="literal">True</span>) <span class="comment"># 绘制h[n]信号</span></span><br><span class="line">plt.grid(<span class="literal">True</span>) <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.xticks(np.arange(<span class="number">0</span>, <span class="number">3</span>, step=<span class="number">1.0</span>)) <span class="comment"># 设置横坐标间隔</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;h[n]&#x27;</span>) <span class="comment"># 信号h[n] title</span></span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">212</span>) <span class="comment"># 绘制卷积信号的子图</span></span><br><span class="line">y = sg.convolve(x1, x2,<span class="string">&#x27;full&#x27;</span>) <span class="comment"># 使用 scipy.signal 的卷积函数 convolve</span></span><br><span class="line">n3 = np.linspace(<span class="number">0</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line">plt.stem(n3,y,<span class="string">&#x27;-&#x27;</span>,use_line_collection=<span class="literal">True</span>) <span class="comment"># 绘制卷积信号</span></span><br><span class="line">plt.grid(<span class="literal">True</span>) <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;Conv Sum y[n]&#x27;</span>) <span class="comment"># 卷积和信号y[n] title</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time index n&#x27;</span>) <span class="comment"># 时间轴</span></span><br><span class="line">plt.subplots_adjust(top=<span class="number">1</span>, wspace=<span class="number">0.2</span>, hspace=<span class="number">0.2</span>) <span class="comment"># 调整视图  </span></span><br><span class="line">plt.show() <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure><p>下面是对代码的解释：</p><ol><li><p>导入必要的库：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入numpy库，用于科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入matplotlib的pyplot，用于绘图</span></span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg  <span class="comment"># 导入scipy的signal模块，用于信号处理</span></span><br></pre></td></tr></table></figure></li><li>创建时间序列和信号x[n]：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n1 = np.linspace(<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># 创建一个时间序列，从0到5，共6个点</span></span><br><span class="line">x1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, -<span class="number">3</span>]  <span class="comment"># 定义信号x[n]</span></span><br></pre></td></tr></table></figure></li><li>创建绘图窗口并绘制信号x[n]：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fig, axs = plt.subplots(<span class="number">2</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">10</span>))  <span class="comment"># 创建一个2x2的子图布局，并设置图像大小为10x10</span></span><br><span class="line">plt.subplot(<span class="number">221</span>)  <span class="comment"># 选择第一个子图进行绘制</span></span><br><span class="line">plt.stem(n1, x1, <span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 使用stem函数绘制离散信号x[n]</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)  <span class="comment"># 开启网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x[n]&#x27;</span>)  <span class="comment"># 设置子图的标题为信号x[n]</span></span><br></pre></td></tr></table></figure></li><li>创建并绘制信号h[n]：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n2 = np.linspace(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 创建一个时间序列，从0到2，共3个点</span></span><br><span class="line">x2 = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>]  <span class="comment"># 定义信号h[n]</span></span><br><span class="line">plt.subplot(<span class="number">222</span>)  <span class="comment"># 选择第二个子图进行绘制</span></span><br><span class="line">plt.stem(n2, x2, <span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 绘制信号h[n]</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)  <span class="comment"># 开启网格</span></span><br><span class="line">_ = plt.xticks(np.arange(<span class="number">0</span>, <span class="number">3</span>, step=<span class="number">1.0</span>))  <span class="comment"># 设置x轴的刻度间隔为1</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;h[n]&#x27;</span>)  <span class="comment"># 设置子图的标题为信号h[n]</span></span><br></pre></td></tr></table></figure></li><li>计算并绘制卷积信号y[n]：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.subplot(<span class="number">212</span>)  <span class="comment"># 选择第三个子图进行绘制</span></span><br><span class="line">y = sg.convolve(x1, x2, <span class="string">&#x27;full&#x27;</span>)  <span class="comment"># 使用scipy.signal的convolve函数计算卷积</span></span><br><span class="line">n3 = np.linspace(<span class="number">0</span>, <span class="number">7</span>, <span class="number">8</span>)  <span class="comment"># 创建卷积信号的时间序列</span></span><br><span class="line">plt.stem(n3, y, <span class="string">&#x27;-&#x27;</span>)  <span class="comment"># 绘制卷积信号y[n]</span></span><br><span class="line">plt.grid(<span class="literal">True</span>)  <span class="comment"># 开启网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;Conv Sum y[n]&#x27;</span>)  <span class="comment"># 设置子图的标题为卷积和信号y[n]</span></span><br></pre></td></tr></table></figure></li><li>设置整体图像的标签和调整布局：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">&#x27;Time index n&#x27;</span>)  <span class="comment"># 设置x轴的标签为时间索引n</span></span><br><span class="line">plt.subplots_adjust(top=<span class="number">1</span>, wspace=<span class="number">0.2</span>, hspace=<span class="number">0.2</span>)  <span class="comment"># 调整子图间的空间，包括水平和垂直方向</span></span><br><span class="line">plt.show()  <span class="comment"># 显示所有绘制的图像</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="/images/Python实现卷积与傅里叶变换.assets/afa57cae-8e68-4c7c-b7b2-6572d686aa35.jpg" alt="图2"></p><h2 id="实现卷积"><a href="#实现卷积" class="headerlink" title="实现卷积"></a>实现卷积</h2><p>这两个实验中因为给的样例代码中作图部分都有点问题，所以进行了一些更改，因为和卷积关系不大，所以下面的内容就略过了它们。</p><h3 id="连续时间卷积"><a href="#连续时间卷积" class="headerlink" title="连续时间卷积"></a>连续时间卷积</h3><p>要进行卷积的两个信号是 $x_1(t)=t u(t)$, $x_2(t)=\mathrm{e}^{-t} u(t)$ 。</p><p>所以需要更改<strong>experiment_2_1.py</strong>中的两个信号为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x1 = np.array([t <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x1(t)阶跃信号</span></span><br><span class="line">x2 = np.array([np.exp(-t) <span class="keyword">if</span> t&gt;=<span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1]) <span class="comment"># 定义x2(t)信号</span></span><br></pre></td></tr></table></figure><p>然后因为卷积的区间变为了 $t=-1.1 \sim 2.1$ ，采样频率变为了 $f_{s}=1000$。所以还需要改一下区间和<code>fs</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs = <span class="number">1000</span> </span><br><span class="line">t1 = np.array([t/fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1100</span>,<span class="number">2101</span>)]) </span><br><span class="line">t2 = np.array([t/fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1100</span>,<span class="number">2101</span>)]) </span><br><span class="line">tt = np.linspace(-<span class="number">2200</span>,<span class="number">4201</span>,n)/fs <span class="comment"># 定义新序列时间范围，卷积结果时间轴，卷积左端点=x1左端点+x2左端点，卷积右端点=x1右端点+x2右端点-1</span></span><br></pre></td></tr></table></figure><p>汇总后的代码如下，保存在<strong>test1.py</strong>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 需要的 library 库</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 科学计算</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg  <span class="comment"># 导入 scipy 的 signal 库 命名为 sg</span></span><br><span class="line"></span><br><span class="line">fs = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">t1 = np.array([t / fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1100</span>, <span class="number">2101</span>)])</span><br><span class="line">x1 = np.array([t <span class="keyword">if</span> t &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1])  <span class="comment"># 定义x1(t)阶跃信号</span></span><br><span class="line">t2 = np.array([t / fs <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1100</span>, <span class="number">2101</span>)])</span><br><span class="line">x2 = np.array([np.exp(-t) <span class="keyword">if</span> t &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> t <span class="keyword">in</span> t1])  <span class="comment"># 定义x2(t)信号</span></span><br><span class="line"></span><br><span class="line">y1 = sg.convolve(x1, x2) / fs  <span class="comment"># 卷积</span></span><br><span class="line">n = <span class="built_in">len</span>(y1)  <span class="comment"># 卷积结果采样点数量</span></span><br><span class="line">tt = np.linspace(-<span class="number">2200</span>, <span class="number">4201</span>, n) / fs  <span class="comment"># 定义新序列时间范围，卷积结果时间轴，卷积左端点=x1左端点+x2左端点，卷积右端点=x1右端点+x2右端点-1</span></span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在左上角添加一个子图</span></span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">0</span>), rowspan=<span class="number">2</span>, colspan=<span class="number">1</span>)</span><br><span class="line">plt.plot(t1, x1)  <span class="comment"># 绘制x1(t)信号</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x1(t)&#x27;</span>)  <span class="comment"># x1(t)信号title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在右上角添加一个子图</span></span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>), rowspan=<span class="number">2</span>, colspan=<span class="number">1</span>)</span><br><span class="line">plt.plot(t2, x2)  <span class="comment"># 绘制x2(t)信号</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;x2(t)&#x27;</span>)  <span class="comment"># x2(t)信号title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在底部横跨左右添加一个大子图</span></span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), rowspan=<span class="number">1</span>, colspan=<span class="number">2</span>)</span><br><span class="line">plt.plot(tt, y1)  <span class="comment"># 绘制卷积信号</span></span><br><span class="line">plt.grid()  <span class="comment"># 显示网格</span></span><br><span class="line">_ = plt.title(<span class="string">&#x27;conv(x1,x2)&#x27;</span>)  <span class="comment"># 卷积信号title</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整子图间距</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240402174632419.png" alt="图3"></p><h3 id="离散时间卷积"><a href="#离散时间卷积" class="headerlink" title="离散时间卷积"></a>离散时间卷积</h3><p>要进行卷积的两个信号是：  $x[n]=[3,2,1,-2,1,0,4,0,3 ; n=0: 8]$ ; $h[n]=[1,-2,3,-4,3,2,1 ; n=   0: 6]$ </p><p>因为除了信号和时间序列发生了变化，其他的代码都没有变化，所以只需要更改两个信号和时间序列即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n1 = np.linspace(<span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>)  <span class="comment"># 创建一个时间序列，从0到8，共9个点</span></span><br><span class="line">x1 = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">3</span>]  <span class="comment"># 定义信号x[n]</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">n2 = np.linspace(<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>) <span class="comment"># 时间序列[0,1,2,3,4,5,6]</span></span><br><span class="line">x2 = [<span class="number">1</span>,-<span class="number">2</span>,<span class="number">3</span>,-<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] <span class="comment"># 信号h[n]</span></span><br><span class="line"><span class="comment">#...</span></span><br><span class="line">n3 = np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">15</span>)</span><br></pre></td></tr></table></figure><p>更改后的代码如下，保存在<strong>test2.py</strong>中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> scipy.signal <span class="keyword">as</span> sg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">n1 = np.linspace(<span class="number">0</span>, <span class="number">8</span>, <span class="number">9</span>)  <span class="comment"># 创建一个时间序列，从0到9，共9个点</span></span><br><span class="line">x1 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, -<span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">3</span>]  <span class="comment"># 定义信号x[n]</span></span><br><span class="line">n2 = np.linspace(<span class="number">0</span>, <span class="number">6</span>, <span class="number">7</span>)  <span class="comment"># 时间序列[0,1,2,3,4,5,6]</span></span><br><span class="line">x2 = [<span class="number">1</span>, -<span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]  <span class="comment"># 信号h[n]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图形和子图</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 左上角子图</span></span><br><span class="line">ax1 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">0</span>), rowspan=<span class="number">2</span>, colspan=<span class="number">1</span>)</span><br><span class="line">plt.stem(n1, x1, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;x[n]&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 右上角子图</span></span><br><span class="line">ax2 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">0</span>, <span class="number">1</span>), rowspan=<span class="number">2</span>, colspan=<span class="number">1</span>)</span><br><span class="line">plt.stem(n2, x2, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;h[n]&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">3</span>, step=<span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 底部横跨子图</span></span><br><span class="line">y = sg.convolve(x1, x2, <span class="string">&#x27;full&#x27;</span>)</span><br><span class="line">n3 = np.linspace(<span class="number">0</span>, <span class="number">14</span>, <span class="number">15</span>)</span><br><span class="line">ax3 = plt.subplot2grid((<span class="number">3</span>, <span class="number">2</span>), (<span class="number">2</span>, <span class="number">0</span>), rowspan=<span class="number">1</span>, colspan=<span class="number">2</span>)</span><br><span class="line">plt.stem(n3, y, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Conv Sum y[n]&#x27;</span>)</span><br><span class="line">plt.grid(<span class="literal">True</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Time index n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整子图间距</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240402175658883.png" alt="图4"></p><h2 id="分析题"><a href="#分析题" class="headerlink" title="分析题"></a>分析题</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>离散时间和连续时间信号的卷积定义分别是：</p><p>离散：</p><script type="math/tex; mode=display">y[n]=x[n]*h[n] = \sum_{k=-\infty}^{\infty} x[k] \cdot h[n-k]</script><p>连续：</p><script type="math/tex; mode=display">y(t)=x(t)*h(t) = \int_{-\infty}^{\infty} x(\tau) \cdot h(t-\tau) \, d\tau</script><p>卷积的作用是：</p><ul><li>通过$x[n]$和$h[n]$的卷积运算就可以得到$x[n]$​通过一个单位脉冲响应为$x[n]$的离散时间线性时不变系统的输出。</li><li>通过$x(t)$和$h(t)$的卷积运算就可以得到$x(t)$通过一个单位脉冲响应为$h(t)$的离散时间线性时不变系统的输出。</li></ul><p>conv 函数只输出了卷积的结果，没有输出对于的时间向量，通过手动设置时间序列可以将时间向量和卷积结果对应起来。</p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>两个离散时间信号进行卷积和所得新序列$y[n]:[a_3,b_3]$的时域区间与原来的两个序列$x(n):[a_1,b_1],h[n]:[a_2,b_2]$,具有的关系是：$a_3=a_1+a_2,b_3=b_1+b_2$。</p><p>因为$h[n-k]$的范围为$[-b_2+n,-a_2+n]$，而$x[n]*h[n] = \sum_{k=-\infty}^{\infty} x[k] \cdot h[n-k]$。所以$y[n]$的第一个非零值应该是$x[a_1]\cdot h[a_1]$，此时$-a_2+n=a_1$，所以$a_3=a_1+a_2$。而$y[n]$最后一个非零值应该是$x[b_1]\cdot h[b_1]$，此时$-b_2+n=b_1$，所以$b_3=b_1+b_2$。</p><h1 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h1><p>给定的实验样例<strong>experiment_3_1.py</strong>中有几个函数：</p><ol><li><code>Rect(A, tao, T, t)</code>函数：<ul><li>定义一个周期为<code>T</code>，宽度为<code>tao</code>的矩形信号。该函数返回在时间<code>t</code>处的信号值。</li></ul></li><li><code>aNt(N, A, omega, T, tao)</code>函数：<ul><li>计算周期矩形信号的傅里叶级数系数，包括<code>a0</code>到<code>aN</code>的系数。这些系数是通过对矩形函数进行积分得到的。</li></ul></li><li><code>plotSquare(A, T, tao)</code>函数：<ul><li>绘制周期为<code>T</code>，宽度为<code>tao</code>的矩形信号。</li></ul></li><li><code>xNt(an, bn, omega, T, N, tao)</code>函数：<ul><li>根据傅里叶级数的系数<code>an</code>和<code>bn</code>，计算周期矩形信号的傅里叶级数有限项级数的逼近值。</li></ul></li><li><code>plot_xNt(an, bn, omega, T, N, tao)</code>函数：<ul><li>绘制周期矩形信号及其傅里叶级数有限项级数的逼近图形。</li></ul></li></ol><p>剩下的代码绘制了傅里叶三角级数的$a_n$和$b_n$的值。</p><h2 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h2><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403091224285.png" alt="image-20240403091224285"></p><p>任务一要求绘制该三角信号的复指数形式和三角形式的傅里叶级数系数。然后用有限项级数逼近其。</p><p>与样例给出的矩形周期函数对比，周期没变，只是形状和幅值发生了。并且用于作图的代码也与矩形周期函数的一样，也不需要改动。所以唯一需要更改的地方是<code>Rect</code>函数。需要在函数值处稍作更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Rect</span>(<span class="params">A, tao, T, t</span>):</span><br><span class="line">    <span class="comment"># 周期矩形函数</span></span><br><span class="line">    temp_t = <span class="built_in">abs</span>(t)</span><br><span class="line">    <span class="keyword">while</span> (temp_t &gt;= T):  <span class="comment"># 将时间变量t转移到[0,T]区间上</span></span><br><span class="line">        temp_t -= T</span><br><span class="line">    <span class="keyword">return</span> temp_t*<span class="number">2</span>-<span class="number">2</span> <span class="keyword">if</span> temp_t &lt;=tao <span class="keyword">else</span> <span class="number">6</span>-<span class="number">2</span>*temp_t <span class="comment"># 返回区间[0,T]内的函数值</span></span><br></pre></td></tr></table></figure><p>然后运行代码，代码放在<strong>test3.py</strong>中。</p><p>得到三角形式的傅里叶级数系数图：</p><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403094529415.png" alt="图5"></p><p>还有复指数形式的傅里叶级数系数图：</p><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403094809529.png" alt="图6"></p><p>随着$N$发生变化，有限项级数逼近周期三角信号的图：</p><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403094926036.png" alt="图7"></p><h2 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h2><p>只需要修改代码文件中的$N$​和绘图的部分即可。代码保存在<strong>test4.py</strong>中。</p><p>运行后得到的结果如下：</p><ul><li>周期矩形波</li></ul><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403110232759.png" alt="image-20240403110232759"></p><ul><li>周期三角波</li></ul><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403110424053.png" alt="image-20240403110424053"></p><p>这里可以看到$N$在较小的时候，随着$N$增大，拟合会变好。但当$N$较大的时候，随着$N$​增大，拟合效果反而变差了。可能是因为当项数增大的时候，计算机精度有限，计算的误差变大了，最后反而使得拟合效果变差了。</p><p>周期矩形波因为有不连续点，所以出现了吉伯斯现象。而周期三角波都是连续点，所以没有吉伯斯现象。</p><h2 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h2><p>已知微分方程：</p><script type="math/tex; mode=display">\frac{\mathrm{d} y(t)}{\mathrm{d} t}+2 y(t)=x(t)</script><p>因为其满足初始松弛条件，所以是一个线性时不变系统。所以如果输入为$x(t)={e}^{\mathrm{j} \omega t}$，输出就是$y(t)=H(\mathrm{j} \omega) \mathrm{e}^{\mathrm{j} \omega t}$。</p><p>所以将$x(t)={e}^{\mathrm{j} \omega t}$和$y(t)=H(\mathrm{j} \omega) \mathrm{e}^{\mathrm{j} \omega t}$代入方程，得到：</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{d\left( H\left( j\omega \right) e^{j\omega t}\right) }{dt} &+ 2\cdot H\left( j\omega \right) e^{j\omega t} = e^{j\omega t} \\j\omega H\left( j\omega \right) e^{j\omega t} &+ 2\cdot H\left( j\omega \right) e^{j\omega t} = e^{j\omega t} \\j\omega H\left( j\omega \right) &+ 2H\left( j\omega \right) = 1 \\H\left( j\omega \right) & = \dfrac{1}{j\omega + 2}\end{aligned}</script><p>因为原本的$x_N(t)$如下：</p><script type="math/tex; mode=display">x_{N}(t)=\sum_{k=-N}^{N} a_{k} \mathrm{e}^{\mathrm{j} k \omega_{0} t}</script><p>而输出响应$y_N(t)$的表达式为：</p><script type="math/tex; mode=display">y_{N}(t)=\sum_{k=-N}^{N} a_{k}H(jk\omega_0) \mathrm{e}^{\mathrm{j} k \omega_{0} t}</script><p>所以只需要更改原来的<code>xNt</code>函数，让叠加的时候对每一项乘上$H(jk\omega_0)$​​：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = np.arange(-<span class="number">3</span> * T, <span class="number">3</span> * T, <span class="number">0.1</span>)  <span class="comment"># 时间采样序列</span></span><br><span class="line">fnt = <span class="number">0</span> <span class="comment"># 输出响应</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(-N, N + <span class="number">1</span>):</span><br><span class="line">    fnt = fnt + Xn[n + N] * (<span class="number">1</span> / (<span class="number">1j</span> * omega + <span class="number">2</span>)) * np.exp(-<span class="number">1j</span> * n * omega * t)  <span class="comment"># 傅里叶级数N项逼近值</span></span><br></pre></td></tr></table></figure><p>运行代码，代码保存在<strong>test5.py</strong>中，得到的结果如下：</p><p><img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403142050464.png" alt="image-20240403142050464"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>从式（1）中复指数形式的傅里叶级数推导式（2）中三角函数形式的傅里叶级数过程如下：<img src="/images/Python实现卷积与傅里叶变换.assets/image-20240403152316948.png" alt="image-20240403152316948"></p><p>对比系数即可以得到</p><script type="math/tex; mode=display">\begin{array}{l}c_{0}=\frac{2}{T} \int_{T} x(t) \mathrm{d} t \\c_{k}=\frac{2}{T} \int_{T} x(t) \cos \left(k \omega_{0} t\right) \mathrm{d} t \\d_{k}=\frac{2}{T} \int_{T} x(t) \sin \left(k \omega_{0} t\right) \mathrm{d} t\end{array}</script>]]></content>
      
      
      <categories>
          
          <category> 重生之我是程序员 </category>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始搭建一个简易神经网络</title>
      <link href="/post/2484359005.html"/>
      <url>/post/2484359005.html</url>
      
        <content type="html"><![CDATA[<h1 id="神经网络简述"><a href="#神经网络简述" class="headerlink" title="神经网络简述"></a>神经网络简述</h1><h2 id="神经元"><a href="#神经元" class="headerlink" title="神经元"></a>神经元</h2><p>神经网络通过模拟人神经元的活动，通过输入预测输出。</p><p><img src="/images/从零开始搭建一个简易神经网络.assets/image-20240424091712887.png" alt="image-20240424091712887"></p><p>神经网络中的一个神经元的树突接触到输入，然后经过计算之后从轴突上传出信号。</p><p>经过抽象之后，一个神经元就长这样：</p><p><img src="/images/从零开始搭建一个简易神经网络.assets/image-20240430201657690.png" alt="image-20240430201657690"></p><p>其接受3个输入，$x_1,x_2,x_3$，经过线性运算$w^Tx+b$，和激活函数$\sigma(z)$后，输出$a$​​。</p><blockquote><p>$w$是一个$3\times1$的列向量，$x$是一个$3\times1$的列向量，$b$是一个实数</p></blockquote><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>多个神经元（cell）一起就组成了神经网络，一个神经网络可以表示为如下这样：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{ init : { &#39;flowchart&#39; : { &#39;curve&#39; : &#39;basis&#39; }}}%%flowchart LRage((年龄))salary((薪水))age-.-&gt;x1((cell)) &amp; x2((cell)) &amp; x3((cell))salary-.-&gt;x1 &amp; x2 &amp; x3x1 &amp; x2 &amp; x3-.-&gt;x4((cell)) &amp; x5((cell)) &amp; x6((cell)) -.-&gt;output((sigmoid))--&gt;y((结果))  </pre></div><p>其中从左到右第一层称为输入层，第二、三层称为隐藏层，第四层成为输出层。</p><h2 id="神经网络的工作方式"><a href="#神经网络的工作方式" class="headerlink" title="神经网络的工作方式"></a>神经网络的工作方式</h2><p>神经网络的每一层都是由多个神经元组成的，这里取这样的一层神经元：</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  %%{ init : { &#39;flowchart&#39; : { &#39;curve&#39; : &#39;basis&#39; }}}%%flowchart LRage((x1))salary((x2))age-.-&gt;x1((cell)) &amp; x2((cell)) &amp; x3((cell))salary-.-&gt;x1 &amp; x2 &amp; x3x1--&gt;y1((y1))x2--&gt;y2((y2))x3--&gt;y3((y3))  </pre></div><p>那么：</p><ul><li>第一个神经元计算$a_1=w_1^Tx+b_1$与$y_1=\sigma(a_1)$。</li><li>第二个神经元计算$a_2=w_2^Tx+b_2$与$y_2=\sigma(a_2)$</li><li>第三个神经元计算$a_3=w_3^Tx+b_1$与$y_3=\sigma(a_3)$</li></ul><blockquote><p>这里，$w_i$是一个$2\times1$的列向量，$x$是一个$2\times1$的列向量，$b$​是一个实数</p></blockquote><p>因为每个神经元执行的操作类似，所以可以将$w_i$和$b$堆叠起来，以表示输入通过这一层神经元得到的输出。</p><p>我们将所有的 $w^T_i$ 按行堆叠成一个矩阵$W$，其中每一行对应一个神经元的权重向量的转置 $w^T_i$。</p><script type="math/tex; mode=display">W = \left[ \begin{array}{cc}w_1^T \\w_2^T \\w_3^T\end{array} \right]</script><p>将所有的偏置 $b_i$ 按行堆叠成一个列向量，其中每个元素对应一个神经元的偏置 $b_i$。因此，堆叠后的 $b$ 将是一个 $3 \times 1$ 的列向量：</p><script type="math/tex; mode=display">b = \left[ \begin{array}{c}b_1 \\b_2 \\b_3\end{array} \right]</script><p>这里，每个 $b_i$ 是一个实数。</p><p>现在，我们可以用堆叠后的 $W$ 和 $b$ 来表示所有神经元的输出：</p><script type="math/tex; mode=display">Y =\sigma( WX + b)</script><p>其中，$Y$ 是一个 $3 \times 1$ 的列向量，包含了所有神经元的输出；$X$ 是一个 $2 \times 1$ 的列向量，表示输入特征。</p><h2 id="多样本"><a href="#多样本" class="headerlink" title="多样本"></a>多样本</h2><p>到目前为止，神经网络的输入还是单样本，但在实际的问题中，遇到的都是多样本，如果一个个样本输入则太慢了。</p><p>又考虑到每个样本$x_i$在神经网络中所经过的计算是相似的。所以，同样的想法，可以将样本$x_1,x_2,\cdots,x_n$按列的方式堆叠成一个矩阵$X$。</p><script type="math/tex; mode=display">X = \left[\begin{array}{cccc}| & | &  & | \\x^{(1)} & x^{(2)} & \cdots & x^{(n)} \\| & | &  & |\end{array}\right]</script><p>展开来就是：</p><script type="math/tex; mode=display">X = \left[\begin{array}{cccc}x^{(1)}_1 & x^{(2)}_1 & \cdots & x^{(n)}_1 \\x^{(1)}_2 & x^{(2)}_2 & \cdots & x^{(n)}_2 \\\vdots & \vdots & \ddots & \vdots \\x^{(1)}_{m} & x^{(2)}_{m} & \cdots & x^{(n)}_{m}\end{array}\right]</script><blockquote><p>$m$个特征，$n$个样本</p></blockquote><p>而每层的计算方式并没有因为样本的堆叠发生改变，仍然是：</p><script type="math/tex; mode=display">Y =\sigma( WX + b)</script><blockquote><p>这里意思是每一列都加上$b$</p></blockquote><p>只不过矩阵的维度发生了变化：</p><ul><li>$X$维度变为$(m,n)$</li><li>$Y$的维度变为$(m’,n)$​</li></ul><blockquote><p>$W$矩阵的维度是$(m’,m)$​维</p></blockquote><h2 id="更新参数"><a href="#更新参数" class="headerlink" title="更新参数"></a>更新参数</h2><p>刚才所述统都属于前向传播的过程，而到这里还有一个关键的问题没有解决，就是神经网络的参数$W$和$b$​​要怎么更新。如果不更新，神经网络就无法学习样本中的特征。所以就需要引入反向传播算法，用于更新这两个参数。</p><p>而反向传播算法中常用的是梯度下降。</p><h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>考虑一个函数$z=f(x,y)$，在高数中学过，其在$x_0,y_0$增长最快的方向就是函数$f(x,y)$在这一点的梯度向量的方向。而$f(x,y)$在$(x_0,y_0)$处的梯度向量是$(\frac{\partial f}{\partial x}|_{x_0,y_0},\frac{\partial f}{\partial y}|_{x_0,y_0})$。所以$(x_0+\frac{\partial f}{\partial x}|_{x_0,y_0},y_0+\frac{\partial f}{\partial y}|_{x_0,y_0})$可以使得$f(x,y)$​增长最快。</p><p>那么相反的（如果一个函数是凸的），函数的减小最快的方向就是梯度向量的反方向，即$(x_0-\frac{\partial f}{\partial x}|_{x_0,y_0},y_0-\frac{\partial f}{\partial y}|_{x_0,y_0})$</p><h3 id="神经网络中的梯度下降"><a href="#神经网络中的梯度下降" class="headerlink" title="神经网络中的梯度下降"></a>神经网络中的梯度下降</h3><p>在神经网络中也是类似的，损失函数$f$（也就是神经网络预测的$\hat y$和实际的$y$的偏差）是各层权重矩阵$W$和偏置向量$b$的函数。</p><p>所以也可以用同样的方法去更新$W$和$b$​：</p><script type="math/tex; mode=display">W=W-\alpha \cdot \frac{\partial f}{\partial W}\\b=b-\alpha \cdot \frac{\partial f}{\partial b}</script><blockquote><p>这里的$\alpha$​是学习率</p></blockquote><p>下面直接给出神经网络中单层的梯度下降公式：</p><ul><li><p>计算 $dZ^{[l]}$：$dZ^{[l]} = dA^{[l]} * g^{[l]’}(Z^{[l]})$</p></li><li><p>计算 $dW^{[l]}$：$dW^{[l]} = \frac{1}{m} dZ^{[l]} \cdot A^{[l-1]T}$</p></li><li><p>计算 $db^{[l]}$：$db^{[l]} = \frac{1}{m}np.sum(dZ^{[l]},axis=1,keepdims=True)$</p></li><li><p>计算 $dA^{[l-1]}$：$dA^{[l-1]} = W^{[l]T} \cdot dZ^{[l]}$</p></li></ul><blockquote><p>其中，$dA^{[l]}$ 是损失函数对 $A^{[l]}$ 的梯度，$dZ^{[l]}$ 是损失函数对 $Z^{[l]}$​ 的梯度。上标$[l]$指的是第$l$​层。以此类推。</p><p>[!NOTE]</p><p>如果想看详细的证明，推荐吴恩达在B站的深度学习课程，这是相关的几节：</p><p><a href="https://www.bilibili.com/video/BV1FT4y1E74V?p=10&amp;vd_source=a72ba0205e5decee94fccb8c6b66a1e2">梯度下降法</a>、<a href="https://www.bilibili.com/video/BV1FT4y1E74V?p=15&amp;vd_source=a72ba0205e5decee94fccb8c6b66a1e2">逻辑回归中的梯度下降法</a>、<a href="https://www.bilibili.com/video/BV1FT4y1E74V?p=16">m个样本的梯度下降</a>、<a href="https://www.bilibili.com/video/BV1FT4y1E74V?p=33&amp;vd_source=a72ba0205e5decee94fccb8c6b66a1e2">神经网络中的梯度下降</a>、<a href="https://www.bilibili.com/video/BV1FT4y1E74V?p=34&amp;vd_source=a72ba0205e5decee94fccb8c6b66a1e2">直观理解反向传播</a></p></blockquote><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>采用<code>Python</code>编写程序，需要用到的库有：</p><ul><li><code>numpy</code>：用于矩阵计算</li><li><code>tensorboard</code>（可选）：用来记录训练数据</li></ul><h1 id="单层神经元"><a href="#单层神经元" class="headerlink" title="单层神经元"></a>单层神经元</h1><p>因为可以将神经网络拆分成一层层神经元的堆叠，所以只要写好一层，将这层复制多份，就可以构建一个神经网络。所以可以创建一个名叫<code>Layer</code>的类，代表一层神经元</p><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LRsubgraph 神经网络layer1[layer]layer2[layer]endinput--&gt;layer1--&gt;layer2--&gt;output  </pre></div><p>而如刚才所述，每一层都进行前向传播和反向传播。而在实现前向传播和反向传播之前，先来考虑每一层中应该有什么元素。</p><h2 id="Layer类中的变量"><a href="#Layer类中的变量" class="headerlink" title="Layer类中的变量"></a>Layer类中的变量</h2><p>再回头看抽象出来的神经元以及前向传播和反向传播的过程：</p><p>可以看出，每一层需要有权重矩阵<code>W</code>，偏置矩阵<code>b</code>，还有选用的激活函数$\sigma$。</p><p>除此之外，构建权重矩阵<code>W</code>时还需要知道该层结点数目；在实现反向传播的时候还需要知道该层神经网络的输入$A^{[l-1]}$、该层神经网络的输出对损失函数的导数$dA^{[l]}$、学习率$\alpha$、$WX+b$的输出$Z$以及样本数$m$。</p><p>所以类的成员变量如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Layer</span>:</span><br><span class="line">    <span class="comment"># 神经元参数</span></span><br><span class="line">    __W = <span class="literal">None</span>  <span class="comment"># 权重矩阵</span></span><br><span class="line">    __b = <span class="literal">None</span>  <span class="comment"># 偏置部分</span></span><br><span class="line">    __A_last_layer = <span class="literal">None</span>  <span class="comment"># 上层的输入</span></span><br><span class="line">    __Z = <span class="literal">None</span>  <span class="comment"># Wx+b得到的Z，之后会在反向传播中运用</span></span><br><span class="line">    __activation_function = <span class="literal">None</span>  <span class="comment"># 激活函数类型</span></span><br><span class="line">    __node_amount = <span class="literal">None</span>  <span class="comment"># 结点数目</span></span><br><span class="line">    __alpha = <span class="literal">None</span>  <span class="comment"># 学习率</span></span><br><span class="line">    __sample_amount = <span class="literal">None</span>  <span class="comment"># 样本数</span></span><br></pre></td></tr></table></figure><p>再给出构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, last_layer_node_amount, node_amount=<span class="number">4</span>, activation_function=<span class="string">&quot;relu&quot;</span>, alpha=<span class="number">0.1</span></span>):</span><br><span class="line">    <span class="comment"># 初始化节点数量和激活函数类型</span></span><br><span class="line">    self.__node_amount = node_amount</span><br><span class="line">    self.__activation_function = activation_function</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化权重矩阵</span></span><br><span class="line">    self.__W = np.random.randn(node_amount, last_layer_node_amount) * np.sqrt(<span class="number">2</span> / last_layer_node_amount)</span><br><span class="line">    <span class="comment"># 初始化偏置矩阵</span></span><br><span class="line">    self.__b = np.random.randn(node_amount, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 设置学习率</span></span><br><span class="line">    self.__alpha = alpha</span><br></pre></td></tr></table></figure><h2 id="前向传播"><a href="#前向传播" class="headerlink" title="前向传播"></a>前向传播</h2><p>之后，就可以开始实现最简单的前向传播算法，总共就只有两步：</p><ol><li>计算$WX+b$得到$Z$​</li><li>根据激活函数的不同，选择不同的激活函数计算$Y=\sigma(Z)$</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, X: np.ndarray</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    前向传播</span></span><br><span class="line"><span class="string">    :param X: 每一列是一个样本，每一行是一个特征</span></span><br><span class="line"><span class="string">    :return: 该层的输出，保持每一列是一个样本，每一行是一个特征</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置样本数</span></span><br><span class="line">    self.__sample_amount = X.shape[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前向传播</span></span><br><span class="line">    self.__A_last_layer = X</span><br><span class="line">    self.__Z = np.dot(self.__W, X) + self.__b  <span class="comment"># 计算WX+b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.__activation_function == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> activation_function.relu(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> activation_function.sigmoid(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> activation_function.linear(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;tanh&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> activation_function.tanh(self.__Z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;invalid activation function!&quot;</span></span><br></pre></td></tr></table></figure><p>这里以<code>relu</code>为例，给出激活函数的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">relu</span>(<span class="params">Z: np.ndarray</span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(Z &gt; <span class="number">0</span>, Z, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><p>反向传播是整个代码中最复杂的部分，但只要掌握这四条公式，也是四个步骤，写下来也不难：</p><ol><li>计算 $dZ^{[l]}$：$dZ^{[l]} = dA^{[l]} * g^{[l]’}(Z^{[l]})$</li><li><p>计算 $dW^{[l]}$：$dW^{[l]} = \frac{1}{m} dZ^{[l]} \cdot A^{[l-1]T}$</p></li><li><p>计算 $db^{[l]}$：$db^{[l]} = \frac{1}{m}np.sum(dZ^{[l]},axis=1,keepdims=True)$</p></li><li><p>计算 $dA^{[l-1]}$：$dA^{[l-1]} = W^{[l]T} \cdot dZ^{[l]}$</p></li></ol><p>转换为对应代码，即为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backward</span>(<span class="params">self, dA</span>):</span><br><span class="line">    dZ = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 计算dZ</span></span><br><span class="line">    <span class="keyword">if</span> self.__activation_function == <span class="string">&quot;relu&quot;</span>:</span><br><span class="line">        dZ = dA * activation_function.d_relu(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;sigmoid&quot;</span>:</span><br><span class="line">        dZ = dA * activation_function.d_sigmoid(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;linear&quot;</span>:</span><br><span class="line">        dZ = dA * activation_function.d_linear(self.__Z)</span><br><span class="line">    <span class="keyword">elif</span> self.__activation_function == <span class="string">&quot;tanh&quot;</span>:</span><br><span class="line">        dZ = dA * activation_function.d_tanh(self.__Z)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;invalid activation function!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算上一层的dA</span></span><br><span class="line">    dA_last_layer = np.dot(self.__W.T, dZ)</span><br><span class="line">    <span class="comment"># 更新权重矩阵</span></span><br><span class="line">    self.__W -= self.__alpha * (<span class="number">1</span> / self.__sample_amount) * np.dot(dZ, self.__A_last_layer.T)</span><br><span class="line">    <span class="comment"># 更新偏置量</span></span><br><span class="line">    self.__b -= (<span class="number">1</span> / self.__sample_amount) * np.<span class="built_in">sum</span>(dZ, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dA_last_layer</span><br></pre></td></tr></table></figure><p>这里以<code>relu</code>为例，给出激活函数导数的实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">d_relu</span>(<span class="params">Z: np.ndarray</span>):</span><br><span class="line">    <span class="keyword">return</span> np.where(Z &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="神经网络的封装"><a href="#神经网络的封装" class="headerlink" title="神经网络的封装"></a>神经网络的封装</h1><p>写好单层之后，将单层神经元进行堆叠就可以得到完整的神经网络。</p><p>定义一个Network类，用于保存神经网络。以下是其的成员变量和构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Network</span>:</span><br><span class="line">    __layers = []  <span class="comment"># 保存隐藏层和输出层</span></span><br><span class="line">    __X_train, __Y_train, __X_test, __Y_test = <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>  <span class="comment"># 训练集和测试集</span></span><br><span class="line">    __loss_function = <span class="literal">None</span>  <span class="comment"># 损失函数</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, nodes_amount: <span class="built_in">list</span>, X_train, Y_train, X_test, Y_test, learning_speed,</span></span><br><span class="line"><span class="params">             output_layer_function=<span class="string">&quot;sigmoid&quot;</span>,</span></span><br><span class="line"><span class="params">             hidden_layer_function=<span class="string">&quot;relu&quot;</span>,</span></span><br><span class="line"><span class="params">             loss_function=<span class="string">&quot;cross entropy&quot;</span></span>):  <span class="comment"># 通过字符串来选择隐藏层，输出层的激活函数，还有损失函数</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    初始化神经网络</span></span><br><span class="line"><span class="string">    :param nodes_amount: 每层的结点数</span></span><br><span class="line"><span class="string">    :param X_train: 训练数据，每行是不同特征，每列是不同样本</span></span><br><span class="line"><span class="string">    :param Y_train: 训练标签，每行使不同特征，每列是不同样本</span></span><br><span class="line"><span class="string">    :param X_test: 测试数据，每行是不同特征，每列是不同样本</span></span><br><span class="line"><span class="string">    :param Y_test: 测试标签，每行是不同特征，每列是不同样本</span></span><br><span class="line"><span class="string">    :param learning_speed: 学习速率</span></span><br><span class="line"><span class="string">    :param output_layer_function: 输出层激活函数</span></span><br><span class="line"><span class="string">    :param hidden_layer_function: 隐藏层激活函数</span></span><br><span class="line"><span class="string">    :param loss_function: 损失函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 判断维度是否正确</span></span><br><span class="line">    <span class="keyword">if</span> X_train.shape[<span class="number">0</span>] != X_test.shape[<span class="number">0</span>] <span class="keyword">or</span> Y_train.shape[<span class="number">0</span>] != Y_test.shape[<span class="number">0</span>] <span class="keyword">or</span> X_train.shape[<span class="number">1</span>:] != \</span><br><span class="line">            Y_train.shape[<span class="number">1</span>:] <span class="keyword">or</span> X_test.shape[<span class="number">1</span>:] != Y_test.shape[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;dimension error&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存损失函数</span></span><br><span class="line">    <span class="keyword">if</span> loss_function == <span class="string">&quot;cross entropy&quot;</span>:</span><br><span class="line">        self.__loss_function = loss_function</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;loss function name error&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存训练集、测试集</span></span><br><span class="line">    self.__X_train = X_train</span><br><span class="line">    self.__X_test = X_test</span><br><span class="line">    self.__Y_train = Y_train</span><br><span class="line">    self.__Y_test = Y_test</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化神经网络</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nodes_amount)):</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">            self.__layers.append(</span><br><span class="line">                layer.Layer(X_train.shape[<span class="number">0</span>], nodes_amount[index], hidden_layer_function, learning_speed))</span><br><span class="line">        <span class="keyword">elif</span> index &lt; <span class="built_in">len</span>(nodes_amount) - <span class="number">1</span>:</span><br><span class="line">            self.__layers.append(</span><br><span class="line">                layer.Layer(nodes_amount[index - <span class="number">1</span>], nodes_amount[index], hidden_layer_function, learning_speed))</span><br><span class="line">        <span class="keyword">elif</span> index == <span class="built_in">len</span>(nodes_amount) - <span class="number">1</span>:</span><br><span class="line">            self.__layers.append(</span><br><span class="line">                layer.Layer(nodes_amount[index - <span class="number">1</span>], nodes_amount[index], output_layer_function, learning_speed))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="神经网络的训练"><a href="#神经网络的训练" class="headerlink" title="神经网络的训练"></a>神经网络的训练</h2><p>因为每一层的前向传播和反向传播都是已经写好的。所以在整个神经网络的训练过程中，只需要逐层调用前向传播和反向传播即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self, times</span>):</span><br><span class="line">    <span class="comment"># 增加计数器</span></span><br><span class="line">    count = increment_counter()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#tensorboard记录</span></span><br><span class="line">    writer = SummaryWriter(<span class="string">&quot;logs&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> iteration <span class="keyword">in</span> <span class="built_in">range</span>(times):</span><br><span class="line">        <span class="comment"># 正向传播</span></span><br><span class="line">        layer_input = self.__X_train</span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__layers)):</span><br><span class="line">            layer = self.__layers[index]</span><br><span class="line">            layer_input = layer.forward(layer_input)</span><br><span class="line"></span><br><span class="line">        dA = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> self.__loss_function == <span class="string">&quot;cross entropy&quot;</span>:</span><br><span class="line">            <span class="comment"># 计算误差。最后一层对下一层的输入就是最终输出</span></span><br><span class="line">            loss = loss_function.cross_entropy(layer_input, self.__Y_train)</span><br><span class="line">            <span class="comment">#记录数据</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;iteration:<span class="subst">&#123;iteration&#125;</span>,loss:<span class="subst">&#123;loss&#125;</span>&#x27;</span>)</span><br><span class="line">            writer.add_scalar(<span class="string">f&#x27;loss<span class="subst">&#123;count&#125;</span>&#x27;</span>, loss, iteration)</span><br><span class="line">            <span class="comment"># 计算最终输出对损失函数的偏导数</span></span><br><span class="line">            dA = loss_function.d_cross_entropy(layer_input, self.__Y_train)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#反向传播</span></span><br><span class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__layers) - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            layer = self.__layers[index]</span><br><span class="line">            dA = layer.backward(dA)</span><br><span class="line">    writer.close()</span><br></pre></td></tr></table></figure><p>因为在反向传播的时候需要给出该层神经元输出对损失函数的偏导数，所以需要计算最终输出对损失函数的偏导数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dA = loss_function.d_cross_entropy(layer_input, self.__Y_train)</span><br></pre></td></tr></table></figure><p>这里的损失函数采取的是交叉熵函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">A: np.ndarray, Y: np.ndarray</span>):</span><br><span class="line">    <span class="keyword">if</span> A.shape != Y.shape:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;dimension is not match&quot;</span></span><br><span class="line">    m = A.shape[<span class="number">1</span>]</span><br><span class="line">    loss = Y * np.log(A) + (<span class="number">1</span> - Y) * np.log(<span class="number">1</span> - A)</span><br><span class="line">    loss = (-<span class="number">1</span> / m) * np.<span class="built_in">sum</span>(loss, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> loss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d_cross_entropy</span>(<span class="params">A: np.ndarray, Y: np.ndarray</span>):</span><br><span class="line">    <span class="keyword">if</span> A.shape != Y.shape:</span><br><span class="line">        <span class="keyword">raise</span> <span class="string">&quot;dimension is not match&quot;</span></span><br><span class="line">    dA = -(Y * (<span class="number">1</span> / A) + (Y - <span class="number">1</span>) * (<span class="number">1</span> / (<span class="number">1</span> - A)))</span><br><span class="line">    <span class="keyword">return</span> dA</span><br></pre></td></tr></table></figure><p>至此，整个训练过程的代码就写完了</p><h2 id="神经网络的预测"><a href="#神经网络的预测" class="headerlink" title="神经网络的预测"></a>神经网络的预测</h2><p>神经网络的预测实际上就是对特征矩阵做一次前向传播，神经网络的输出就是预测结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, X</span>):</span><br><span class="line">    layer_input = X</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.__layers)):</span><br><span class="line">        layer = self.__layers[index]</span><br><span class="line">        layer_input = layer.forward(layer_input)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> layer_input</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，整个神经网络的框架就搭建好了。主要的两个类是单层神经元<code>Layer</code>以及神经网络类<code>Network</code>：<code>Layer</code>类需要实现前向传播和反向传播，<code>Network</code>类需要实现训练的过程。</p><p>其他的例如激活函数的改变、损失函数的改变，只需要在原有的框架下写一些条件判断即可。</p>]]></content>
      
      
      <categories>
          
          <category> 重生之我是程序员 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>爬虫笔记</title>
      <link href="/post/498308509.html"/>
      <url>/post/498308509.html</url>
      
        <content type="html"><![CDATA[<h1 id="模拟发送-HTTP-请求"><a href="#模拟发送-HTTP-请求" class="headerlink" title="模拟发送 HTTP 请求"></a>模拟发送 HTTP 请求</h1><h2 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h2><p>GET请求是HTTP协议中定义的一种请求方法，用于从服务器获取数据。当发起一个GET请求时，客户端（通常是用户的网页浏览器）向服务器发送一个请求，请求服务器返回指定的资源或数据。当我们用浏览器打开网页时，其实发送的最原始的请求就是 GET 请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">res = requests.get(<span class="string">&#x27;http://www.douban.com&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(res) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(res)) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">&lt;Response [<span class="number">200</span>]&gt; </span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;requests.models.Response&#x27;</span>&gt; </span><br></pre></td></tr></table></figure><p>可以看到，我们得到的是一个 <code>Response</code> 对象</p><p>如果我们要获取网站返回的数据，可以使用 <code>text</code> 或者 <code>content</code> 属性来获取</p><p><code>text</code>：是以字符串的形式返回数据</p><p><code>content</code>：是以二进制的方式返回数据</p><h2 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h2><p>POST请求是HTTP协议中定义的另一种请求方法，用于向服务器提交数据。当发起一个POST请求时，客户端向服务器发送数据，并且这些数据通常作为HTTP请求的一部分（称为请求体）被发送。</p><p>对于 POST 请求，一般就是提交一个表单。<code>data</code> 当中，就是需要传递的表单信息，是一个字典类型的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.post(<span class="string">&#x27;http://www.xxxx.com&#x27;</span>, data=&#123;<span class="string">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span>&#125;) </span><br></pre></td></tr></table></figure><h2 id="header-增强"><a href="#header-增强" class="headerlink" title="header 增强"></a>header 增强</h2><p>requests 发送的请求所带的请求头中 User-Agent 会标识为 python 程序发送的请求。</p><p>由于这种行为仅仅是消耗服务器资源带来成本，但是不会给对方带来任何好处（搜索引擎的爬虫除外），所以有一些网站会加入反爬机制，通过识别 headers 来拒绝对你的请求进行响应。</p><p>所以需要做一些 header 增强。比如：UA，Cookie，host 等等信息。</p><p>浏览器访问网站时的 headers 可以在<a href="https://link.zhihu.com/?target=https%3A//httpbin.org/headers">httpbin.org/headers</a> 中得到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;headers&quot;: &#123;</span><br><span class="line">    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;, </span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate, br&quot;, </span><br><span class="line">    &quot;Accept-Language&quot;: &quot;zh-CN,zh-Hans;q=0.9&quot;, </span><br><span class="line">    &quot;Host&quot;: &quot;httpbin.org&quot;, </span><br><span class="line">    &quot;Referer&quot;: &quot;https://link.zhihu.com/?target=https%3A//httpbin.org/headers&quot;, </span><br><span class="line">    &quot;Sec-Fetch-Dest&quot;: &quot;document&quot;, </span><br><span class="line">    &quot;Sec-Fetch-Mode&quot;: &quot;navigate&quot;, </span><br><span class="line">    &quot;Sec-Fetch-Site&quot;: &quot;cross-site&quot;, </span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.4.1 Safari/605.1.15&quot;, </span><br><span class="line">    &quot;X-Amzn-Trace-Id&quot;: &quot;Root=1-662b0580-3525d80357418fc75f2d3472&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面的请求头复制下来，传给 <code>requests.get()</code> 函数，即可将请求伪装成浏览器。</p><p><code>requests.get()</code> 的语法是：<code>requests.get(url,kwargs)</code>。</p><p>其中，url 是我们想要访问的链接，kwargs 是可选参数，包括params、data、json、headers、cookies、auth、files、timeout、proxies、stream、verify、cert等。常用的参数有data、headers。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://httpbin.org/headers&#x27;</span></span><br><span class="line"></span><br><span class="line">headers= &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;image/gif, image/jpeg, image/pjpeg, application/x-ms-application, application/xaml+xml, application/x-ms-xbap, */*&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-Hans-CN,zh-Hans;q=0.8,en-US;q=0.5,en;q=0.3&quot;</span>, </span><br><span class="line">    <span class="string">&quot;Host&quot;</span>: <span class="string">&quot;httpbin.org&quot;</span>, </span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; Tablet PC 2.0; wbx 1.0.0; wbxapp 1.0.0; Zoom 3.6.0)&quot;</span>, </span><br><span class="line">    <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-628b672d-4d6de7f34d15a77960784504&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(response.text) </span><br></pre></td></tr></table></figure><h1 id="解析-HTML"><a href="#解析-HTML" class="headerlink" title="解析 HTML"></a>解析 HTML</h1><p>现在我们已经获取到了网页返回的数据，即 HTML 代码，下面就需要解析 HTML，来提取其中有效的信息。</p><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><p><code>BeautifulSoup</code> 是 Python 的一个库，最主要的功能是从网页解析数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup  <span class="comment"># 导入 BeautifulSoup 的方法 </span></span><br><span class="line"><span class="comment"># 可以传入一段字符串，或者传入一个文件句柄。一般都会先用 requests 库获取网页内容，然后使用 soup 解析。 </span></span><br><span class="line">soup = BeautifulSoup(html_doc,<span class="string">&#x27;html.parser&#x27;</span>)  <span class="comment"># 这里一定要指定解析器，可以使用默认的 html，也可以使用 lxml。 </span></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())  <span class="comment"># 按照标准的缩进格式输出获取的 soup 内容。 </span></span><br></pre></td></tr></table></figure><blockquote><p><code>bs4</code> 是 <code>BeautifulSoup</code> 库的简称，它是一个用于解析 HTML 和 XML 文档的 Python 库，通常用于网页抓取和数据分析。<code>BeautifulSoup</code> 能够处理复杂的 HTML 网页内容，并提供简单易用的 API 来访问和修改数据。</p><p><code>BeautifulSoup</code> 库的名字来源于一个儿童故事中的角色，这个角色喜欢“把字符串咀嚼成美味的网络抓取汤”，因此得名“BeautifulSoup”。</p></blockquote><h3 id="BeautifulSoup-的一些简单用法"><a href="#BeautifulSoup-的一些简单用法" class="headerlink" title="BeautifulSoup 的一些简单用法"></a>BeautifulSoup 的一些简单用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.title)  <span class="comment"># 获取文档的 title </span></span><br><span class="line"><span class="built_in">print</span>(soup.title.name)  <span class="comment"># 获取 title 的 name 属性 </span></span><br><span class="line"><span class="built_in">print</span>(soup.title.string)  <span class="comment"># 获取 title 的内容 </span></span><br><span class="line"><span class="built_in">print</span>(soup.p)  <span class="comment"># 获取文档中第一个 p 节点 </span></span><br><span class="line"><span class="built_in">print</span>(soup.p[<span class="string">&#x27;class&#x27;</span>])  <span class="comment"># 获取第一个 p 节点的 class 内容 </span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;a&#x27;</span>))  <span class="comment"># 获取文档中所有的 a 节点，返回一个 list </span></span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="string">&#x27;span&#x27;</span>, attrs=&#123;<span class="string">&#x27;style&#x27;</span>: <span class="string">&quot;color:#ff0000&quot;</span>&#125;))  <span class="comment"># 获取文档中所有的 span 且 style 符合规则的节点，返回一个 list </span></span><br></pre></td></tr></table></figure><p>在HTML和XML文档中，<code>p</code> 结点通常指的是 <code>&lt;p&gt;</code> 标签创建的元素，它代表一个段落（Paragraph）。<code>&lt;p&gt;</code> 标签是块级元素，用于定义文本的一个段落。在网页中，浏览器会在段落之间添加一些垂直的空白，以区分不同的段落。<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的HTML代码中，每个 <code>&lt;p&gt;</code> 元素都定义了一个文本段落。<br>同样，<code>a</code> 结点指的是 <code>&lt;a&gt;</code> 标签创建的元素，它代表一个锚点（Anchor）。<code>&lt;a&gt;</code> 标签用于创建超链接，允许用户通过点击跳转到其他网页、文件、位置或其他资源。<code>&lt;a&gt;</code> 标签可以包含文本、图片等任何内容，并且通常有一个 <code>href</code> 属性，指定了链接的目标URL。<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span>访问示例网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的HTML代码中，<code>&lt;a&gt;</code> 元素创建了一个文本为“访问示例网站”的超链接，当用户点击这个链接时，浏览器会跳转到 <code>https://www.example.com</code> 这个URL。</p><h3 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h3><p>在Python的<code>BeautifulSoup</code>库中，<code>find_all</code>方法用于搜索HTML或XML文档，并返回所有匹配指定条件的元素。<code>find_all</code>方法可以接受多种参数，包括要查找的标签名、属性、CSS类等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = content.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;cover&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这行代码的作用是：</p><ol><li><code>content</code> 是一个 <code>BeautifulSoup</code> 对象，它代表了已经解析的HTML文档。</li><li><code>find_all</code> 方法被调用，第一个参数 <code>&#39;div&#39;</code> 指定了要搜索的标签名，即 <code>&lt;div&gt;</code>。</li><li><code>attrs=&#123;&#39;class&#39;: &#39;cover&#39;&#125;</code> 参数指定了要搜索的 <code>&lt;div&gt;</code> 标签必须具有 <code>class</code> 属性，且属性值包含 <code>cover</code>。这意味着 <code>find_all</code> 方法将返回所有类名为 <code>cover</code> 的 <code>&lt;div&gt;</code> 元素。</li></ol><p>结果 <code>data</code> 将是一个列表，包含了文档中所有匹配的 <code>&lt;div&gt;</code> 元素。每个元素都是一个 <code>Tag</code> 对象，你可以对这些对象进行进一步的操作，例如提取文本、属性或其他嵌套的标签。</p><p>例如，如果您想要遍历这些 <code>&lt;div&gt;</code> 元素并打印它们的文本内容，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(div.get_text())</span><br></pre></td></tr></table></figure><p>这将会打印出每个类名为 <code>cover</code> 的 <code>&lt;div&gt;</code> 元素中的文本内容。</p><blockquote><p><code>&lt;div&gt;</code>元素是HTML文档中的一个块级元素，它用于定义文档中的一个区域或部分，并且可以用来组合其他HTML元素。<code>&lt;div&gt;</code>是 “division” 的缩写，意为“分区”。</p></blockquote><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>在 <code>BeautifulSoup</code> 中，<code>find</code> 方法用于搜索当前元素下的子元素，并返回第一个匹配的元素。如果找到了多个匹配的元素，<code>find</code> 方法只返回第一个匹配的元素。如果没有找到匹配的元素，则返回 <code>None</code>。</p><p>例如，假设我们有以下HTML代码片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们已经有一个 <code>BeautifulSoup</code> 对象 <code>d</code>，它代表上面的 <code>&lt;div&gt;</code> 元素，那么我们可以使用 <code>d.find(&#39;img&#39;)</code> 来找到第一个 <code>&lt;img&gt;</code> 子元素。</p><p>我们可以进一步从 <code>img_tag</code> 中获取 <code>src</code> 属性，得到图片的URL：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img_url = img_tag[<span class="string">&#x27;src&#x27;</span>]</span><br></pre></td></tr></table></figure><p>在这里，<code>img_url</code> 的值将是 <code>&quot;image1.jpg&quot;</code>。</p><h3 id="get-text"><a href="#get-text" class="headerlink" title="get_text"></a>get_text</h3><p>在 <code>BeautifulSoup</code> 中，<code>get_text()</code> 方法是一个用于提取标签内文本内容的方法。它将返回一个字符串，该字符串包含指定标签及其所有子标签的文本内容，而不包含任何HTML标签或属性。</p><p><code>get_text()</code> 方法可以用于任何 <code>Tag</code> 对象，它会递归地提取所有子标签的文本，并将它们连接成一个字符串。<br>这里有一些 <code>get_text()</code> 方法的基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 假设我们有以下HTML内容</span></span><br><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">    &lt;title&gt;Page Title&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;这是一个段落。&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;a href=&quot;http://example.com&quot;&gt;这是一个链接&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 使用 BeautifulSoup 解析 HTML</span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"><span class="comment"># 获取整个文档的文本内容</span></span><br><span class="line">text = soup.get_text()</span><br><span class="line"><span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><p>输出将会是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Page Title</span><br><span class="line">这是一个段落。</span><br><span class="line">这是一个链接</span><br></pre></td></tr></table></figure><br>你也可以在特定的标签上调用 <code>get_text()</code> 方法来提取该标签及其子标签的文本：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取特定标签 &lt;div&gt; 的文本内容</span></span><br><span class="line">div_text = soup.div.get_text()</span><br><span class="line"><span class="built_in">print</span>(div_text)</span><br></pre></td></tr></table></figure><br>输出将会是：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个段落。</span><br><span class="line">这是一个链接</span><br></pre></td></tr></table></figure><br><code>get_text()</code> 方法还有一些参数，可以用来控制如何提取文本：</p><ul><li><code>strip</code>: 布尔值，默认为 <code>False</code>，表示是否去除文本前后的空白字符。</li><li><code>separator</code>: 字符串，用于连接各个文本片段的分隔符，默认为 “”，表示不添加分隔符。</li></ul><h1 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_picture</span>(<span class="params">pic_l</span>): </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">r&#x27;picture&#x27;</span>): </span><br><span class="line">        os.mkdir(<span class="string">r&#x27;picture&#x27;</span>) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> pic_l: </span><br><span class="line">        pic = requests.get(i) </span><br><span class="line">        p_name = i.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">7</span>] </span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;picture\\&#x27;</span> + p_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f: </span><br><span class="line">            f.write(pic.content) </span><br></pre></td></tr></table></figure><ol><li><code>if not os.path.exists(r&#39;picture&#39;):</code><ul><li>这个条件判断语句检查在当前目录下是否存在一个名为 <code>picture</code> 的文件夹。<code>os.path.exists</code>是一个检查路径是否存在的函数，<code>r&#39;picture&#39;</code> 表示 <code>picture</code> 文件夹的路径，<code>r</code> 前缀表示这是一个原始字符串，不处理反斜杠 <code>\</code> 作为转义字符。</li></ul></li><li><code>os.mkdir(r&#39;picture&#39;)</code><ul><li>如果上述条件成立（即 <code>picture</code> 文件夹不存在），这行代码会创建一个名为 <code>picture</code> 的新文件夹。</li></ul></li><li><code>pic = requests.get(i)</code><ul><li>在循环内部，这行代码使用 <code>requests.get</code> 函数从互联网上获取（下载）URL <code>i</code> 指向的图片内容，并将响应内容赋值给变量 <code>pic</code>。</li></ul></li><li><code>p_name = i.split(&#39;/&#39;)[7]</code><ul><li>这行代码将URL <code>i</code> 按照斜杠 <code>/</code> 分割成多个部分，并取出第8个部分（列表索引为7）作为图片的文件名。这里假设URL的第八部分是图片的文件名。</li></ul></li><li><code>with open(&#39;picture\\&#39; + p_name, &#39;wb&#39;) as f:</code><ul><li>这行代码打开一个文件，文件路径是 <code>picture</code> 文件夹加上图片的文件名 <code>p_name</code>，文件以二进制写模式（‘wb’）打开。<code>with</code> 语句确保文件使用后会被正确关闭。变量 <code>f</code> 是打开文件的引用。</li></ul></li><li><code>f.write(pic.content)</code><ul><li>最后，这行代码将下载的图片内容 <code>pic.content</code> 写入到文件 <code>f</code> 中，完成图片的保存。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 重生之我是程序员 </category>
          
          <category> Python笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>你好</title>
      <link href="/post/10739.html"/>
      <url>/post/10739.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
